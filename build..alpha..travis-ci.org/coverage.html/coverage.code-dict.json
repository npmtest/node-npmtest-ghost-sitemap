{"/home/travis/build/npmtest/node-npmtest-ghost-sitemap/test.js":"/* istanbul instrument in package npmtest_ghost_sitemap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ghost-sitemap/lib.npmtest_ghost_sitemap.js":"/* istanbul instrument in package npmtest_ghost_sitemap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ghost_sitemap = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ghost_sitemap = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ghost-sitemap/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ghost-sitemap && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ghost_sitemap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ghost_sitemap\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ghost_sitemap.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ghost_sitemap.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ghost_sitemap.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ghost_sitemap.__dirname + '/lib.npmtest_ghost_sitemap.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ghost-sitemap/node_modules/ghost-sitemap/index.js":"#!/usr/bin/env node\n\nvar Ghost, Ping, SiteMap, colors, commands, fs, generate, init, initSiteMap, jf, logSymbols, messages, mkdirp, nut, ping, pluralize, _;\n\nSiteMap = require('./lib/sitemap');\n\nGhost = require('./lib/ghost');\n\njf = require('jsonfile');\n\nmessages = require('./messages');\n\ncolors = require('colors');\n\nfs = require('fs');\n\npluralize = require('pluralize');\n\n_ = require('lodash');\n\nmkdirp = require('mkdirp');\n\nnut = require('nut-cli');\n\nPing = require('./lib/ping');\n\nlogSymbols = require('log-symbols');\n\ninitSiteMap = '';\n\nnut.bootCommand('ghostSiteMapBuilder');\n\nnut.addCommand('init', false, 'Initiate a new sitemap builder inside ghost root directory');\n\nnut.addCommand('generate', false, 'Generate new sitemaps');\n\nnut.addCommand('ping', '[searchEngine:String]', 'Ping google and bing about your update');\n\ncommands = nut.parse();\n\ninit = function() {\n  return jf.readFile('package.json', function(err, obj) {\n    var data;\n    if (err) {\n      console.log(colors.red(logSymbols.error, messages.not_inside_root));\n      process.exit(1);\n    } else {\n      data = {\n        ghost_config_path: './config.js',\n        env: process.env.ENV_VARIABLE || 'development',\n        output_dir: 'sitemap',\n        posts: {\n          frequency: 'hourly',\n          priority: '0.1'\n        },\n        pages: {\n          frequency: 'monthly',\n          priority: '0.1'\n        },\n        tags: {\n          frequency: 'daily',\n          priority: '0.3'\n        }\n      };\n      return fs.writeFile('./sitemapfile.json', JSON.stringify(data, null, 4), function(err) {\n        if (err) {\n          console.log(colors.red(logSymbols.error, messages.not_writable));\n          return process.exit(1);\n        } else {\n          console.log(colors.green(logSymbols.success, messages.writable));\n          return console.log(JSON.stringify(data, null, 4));\n        }\n      });\n    }\n  });\n};\n\ngenerate = function(initGhostConfig) {\n  initGhostConfig.ghostToMine().then(function(configration) {\n    console.log(colors.cyan(messages.init));\n    initSiteMap = new SiteMap(configration);\n    console.log(colors.cyan(_.template(messages.fetching, {\n      type: 'posts'\n    })));\n    return initSiteMap.getPermalink();\n  }).then(function(permalink) {\n    return initSiteMap.getPosts(permalink);\n  }).then(function(posts) {\n    var counts;\n    counts = _.size(posts);\n    if (counts > 0) {\n      console.log(colors.green(logSymbols.success, _.template(messages.fetched, {\n        counts: counts,\n        type: pluralize('post', counts)\n      })));\n    } else {\n      console.log(colors.blue(logSymbols.info, _.template(messages.not_found, {\n        type: 'posts'\n      })));\n    }\n    return initSiteMap.objectToXML(posts, 'posts');\n  }).then(function(postsXml) {\n    if (postsXml !== \"bypass\") {\n      console.log(colors.cyan(_.template(messages.writing, {\n        type: 'posts',\n        file: 'gposts.xml'\n      })));\n    }\n    return initSiteMap.xmlToFile(postsXml, 'gposts.xml');\n  }).then(function() {\n    console.log(colors.green(logSymbols.success, _.template(messages.written, {\n      file: 'gposts.xml'\n    })));\n    console.log(colors.cyan(_.template(messages.fetching, {\n      type: 'tags'\n    })));\n    return initSiteMap.getTags();\n  }).then(function(tags) {\n    var counts;\n    counts = _.size(tags);\n    if (counts > 0) {\n      console.log(colors.green(logSymbols.success, _.template(messages.fetched, {\n        counts: counts,\n        type: pluralize('tag', counts)\n      })));\n    } else {\n      console.log(colors.blue(logSymbols.info, _.template(messages.not_found, {\n        type: 'tags'\n      })));\n    }\n    return initSiteMap.objectToXML(tags, 'tags', 'tag');\n  }).then(function(tagsXml) {\n    if (tagsXml !== \"bypass\") {\n      console.log(colors.cyan(_.template(messages.writing, {\n        type: 'tags',\n        file: 'gtags.xml'\n      })));\n    }\n    return initSiteMap.xmlToFile(tagsXml, 'gtags.xml');\n  }).then(function() {\n    console.log(colors.green(logSymbols.success, _.template(messages.written, {\n      file: 'gtags.xml'\n    })));\n    console.log(colors.cyan(_.template(messages.fetching, {\n      type: 'pages'\n    })));\n    return initSiteMap.getPages();\n  }).then(function(pages) {\n    var counts;\n    counts = _.size(pages);\n    if (counts > 0) {\n      console.log(colors.green(logSymbols.success, _.template(messages.fetched, {\n        counts: counts,\n        type: pluralize('page', counts)\n      })));\n    } else {\n      console.log(colors.blue(logSymbols.info, _.template(messages.not_found, {\n        type: 'pages'\n      })));\n    }\n    return initSiteMap.objectToXML(pages, 'pages');\n  }).then(function(pagesXml) {\n    if (pagesXml !== \"bypass\") {\n      console.log(colors.cyan(_.template(messages.writing, {\n        type: 'pages',\n        file: 'gpages.xml'\n      })));\n    }\n    return initSiteMap.xmlToFile(pagesXml, 'gpages.xml');\n  }).then(function() {\n    console.log(colors.cyan(messages.building));\n    return initSiteMap.finalSiteMap();\n  }).then(function(xml) {\n    return initSiteMap.xmlToFile(xml, 'sitemap.xml');\n  }).then(function() {\n    return console.log(colors.green(logSymbols.success, messages.alldone));\n  })[\"catch\"](function(error) {\n    console.log(colors.red(logSymbols.error, error));\n    return process.exit(1);\n  }).done(function() {\n    return process.exit(0);\n  });\n};\n\nping = function(initGhostConfig, service) {\n  return initGhostConfig.ghostToMine().then(function(configration) {\n    var initPings;\n    console.log(colors.cyan(_.template(messages.pinging, {\n      service: service\n    })));\n    initPings = new Ping(configration);\n    return initPings.pingServer(service);\n  }).then(function(success) {\n    return _.map(success, function(val) {\n      if (val.status === 200) {\n        return console.log(colors.green(logSymbols.success, _.template(messages.ping_success, {\n          file: val.file,\n          service: service\n        })));\n      } else {\n        return console.log(colors.red(logSymbols.error, _.template(messages.ping_error, {\n          file: val.file,\n          service: service,\n          status_code: val.status\n        })));\n      }\n    });\n  })[\"catch\"](function(error) {\n    console.log(colors.red(logSymbols.error, error));\n    return process.exit(1);\n  });\n};\n\nif (commands.init) {\n  init();\n} else {\n  jf.readFile('sitemapfile.json', function(err, obj) {\n    var initGhostConfig, ping_to;\n    if (err) {\n      console.log(colors.red(logSymbols.error, messages.config_not_found));\n    } else {\n      mkdirp.sync(obj.output_dir);\n      initGhostConfig = new Ghost(obj);\n      if (commands.generate) {\n        generate(initGhostConfig);\n      }\n      if (commands.ping) {\n        if (commands.ping === 'all') {\n          ping_to = ['google', 'bing'];\n        } else {\n          ping_to = commands.ping.split(',');\n        }\n        return _.each(ping_to, function(to) {\n          return ping(initGhostConfig, to);\n        });\n      }\n    }\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-ghost-sitemap/node_modules/ghost-sitemap/lib/sitemap.js":"var SiteMap, fs, knex, path, q, sm, _;\n\nknex = require('knex');\n\nq = require('q');\n\nfs = require('fs');\n\n_ = require('lodash');\n\nsm = require('sitemap');\n\npath = require('path');\n\nSiteMap = (function() {\n  function SiteMap(config) {\n    var connection;\n    this.config = config;\n    connection = this.config.database;\n    this.baseUrl = this.config.url;\n    knex = knex(connection);\n  }\n\n  SiteMap.prototype.getPermalink = function() {\n    var defer;\n    defer = q.defer();\n    knex.select('value').from('settings').where(function() {\n      this.where('key', 'permalinks');\n    }).then(function(permalink) {\n      defer.resolve(permalink);\n    })[\"catch\"](function(err) {\n      defer.reject(err);\n    });\n    return defer.promise;\n  };\n\n  SiteMap.prototype.getPosts = function(permalink) {\n    var defer, error;\n    defer = q.defer();\n    error = {\n      error: 'No posts found'\n    };\n    knex.select('slug', 'published_at').from('posts').where(function() {\n      this.where('status', 'published').where('page', 0);\n    }).then(function(posts) {\n      var filtered_posts;\n      filtered_posts = _.map(posts, function(item) {\n        var date, day, mapObj, month, re, slug_to_return, year;\n        date = new Date(item.published_at);\n        year = date.getFullYear();\n        month = date.getMonth();\n        day = date.getDay();\n        mapObj = {\n          '/:year': year,\n          '/:month': month,\n          '/:day': day,\n          '/:slug/': item.slug\n        };\n        re = new RegExp(Object.keys(mapObj).join(\"|\"), \"gi\");\n        slug_to_return = permalink[0].value.replace(re, function(matched) {\n          return \"\" + mapObj[matched.toLowerCase()] + \"/\";\n        });\n        if (slug_to_return.substr(-1) === '/') {\n          item.slug = slug_to_return.substr(0, slug_to_return.length - 1);\n        } else {\n          item.slug = slug_to_return;\n        }\n      });\n      if (posts) {\n        defer.resolve(posts);\n      } else {\n        defer.reject(error);\n      }\n    })[\"catch\"](function(err) {\n      defer.reject(error);\n    });\n    return defer.promise;\n  };\n\n  SiteMap.prototype.getPages = function() {\n    var defer, error;\n    defer = q.defer();\n    error = {\n      error: 'No pages found'\n    };\n    knex.select('slug', 'published_at').from('posts').where(function() {\n      this.where('status', 'published').where('page', 1);\n    }).then(function(posts) {\n      if (posts) {\n        defer.resolve(posts);\n      } else {\n        defer.reject(error);\n      }\n    })[\"catch\"](function(err) {\n      defer.reject(error);\n    });\n    return defer.promise;\n  };\n\n  SiteMap.prototype.getTags = function() {\n    var defer, error;\n    defer = q.defer();\n    error = {\n      error: 'No tags found'\n    };\n    knex.select('tags.slug').from('tags').innerJoin('posts_tags', function() {\n      this.on('tags.id', '=', 'posts_tags.tag_id');\n    }).then(function(tags) {\n      if (tags) {\n        defer.resolve(tags);\n      } else {\n        defer.reject(error);\n      }\n    })[\"catch\"](function(err) {\n      defer.resolve(error);\n    });\n    return defer.promise;\n  };\n\n  SiteMap.prototype.objectToXML = function(object, type, prefix) {\n    var baseUrl, defer, key, params, sitemap, urls, value;\n    urls = [];\n    defer = q.defer();\n    params = this.config[type];\n    if (_.size(object) > 0) {\n      if (prefix) {\n        baseUrl = \"\" + this.baseUrl + \"/\" + prefix + \"/\";\n      } else {\n        baseUrl = \"\" + this.baseUrl + \"/\";\n      }\n      for (key in object) {\n        value = object[key];\n        urls.push({\n          url: value.slug,\n          changefreq: params.frequency,\n          priority: params.priority\n        });\n      }\n      sitemap = sm.createSitemap({\n        hostname: baseUrl,\n        cacheTime: 600000,\n        urls: urls\n      });\n      sitemap.toXML(function(xml) {\n        return defer.resolve(xml);\n      });\n    } else {\n      defer.resolve(\"bypass\");\n    }\n    return defer.promise;\n  };\n\n  SiteMap.prototype.xmlToFile = function(xml, name) {\n    var defer, innerPath;\n    defer = q.defer();\n    innerPath = path.join(process.cwd(), \"\" + this.config.output_dir + \"/\" + name);\n    if (xml !== \"bypass\") {\n      fs.writeFile(innerPath, xml, function(err) {\n        if (err) {\n          defer.reject(err);\n        } else {\n          defer.resolve(\"created file \" + path);\n        }\n      });\n    } else {\n      fs.exists(innerPath, function(exists) {\n        if (exists) {\n          return fs.unlink(innerPath, function(err) {\n            if (err) {\n              defer.reject(err);\n            } else {\n              defer.resolve(\"created file \" + path);\n            }\n          });\n        } else {\n          defer.resolve(\"bypass\");\n        }\n      });\n    }\n    return defer.promise;\n  };\n\n  SiteMap.prototype.finalSiteMap = function() {\n    var baseUrl, defer, dir, innerPath;\n    defer = q.defer();\n    innerPath = path.join(process.cwd(), this.config.output_dir + \"/\");\n    dir = this.config.output_dir;\n    baseUrl = this.baseUrl;\n    fs.readdir(innerPath, function(err, files) {\n      var file, sitemap, urls, _i, _len;\n      if (files) {\n        urls = [];\n        for (_i = 0, _len = files.length; _i < _len; _i++) {\n          file = files[_i];\n          if (file !== 'sitemap.xml') {\n            urls.push({\n              url: \"/\" + dir + \"/\" + file,\n              changefreq: 'monthly',\n              priority: '0.7'\n            });\n          }\n        }\n        sitemap = sm.createSitemap({\n          hostname: baseUrl,\n          cacheTime: 600000,\n          urls: urls\n        });\n        return sitemap.toXML(function(xml) {\n          return defer.resolve(xml);\n        });\n      } else {\n        return defer.reject(err);\n      }\n    });\n    return defer.promise;\n  };\n\n  return SiteMap;\n\n})();\n\nmodule.exports = SiteMap;\n","/home/travis/build/npmtest/node-npmtest-ghost-sitemap/node_modules/ghost-sitemap/lib/ghost.js":"var GhostConfig, colors, fs, messages, path, q, _;\n\nfs = require('fs');\n\nq = require('q');\n\n_ = require('lodash');\n\nmessages = require('../messages');\n\ncolors = require('colors');\n\npath = require('path');\n\nGhostConfig = (function() {\n  function GhostConfig(obj) {\n    var e;\n    this.obj = obj;\n    this.path = path.join(process.cwd(), this.obj.ghost_config_path);\n    this.env = this.obj.env;\n    try {\n      this.ghostConfig = require(this.path);\n    } catch (_error) {\n      e = _error;\n      console.log(colors.red(messages.ghost_config_not_found.replace('%path%', this.path)));\n      process.exit(1);\n    }\n  }\n\n  GhostConfig.prototype.ghostToMine = function() {\n    var defer;\n    defer = q.defer();\n    defer.resolve(_.assign(this.ghostConfig[this.env], this.obj));\n    return defer.promise;\n  };\n\n  return GhostConfig;\n\n})();\n\nmodule.exports = GhostConfig;\n","/home/travis/build/npmtest/node-npmtest-ghost-sitemap/node_modules/ghost-sitemap/messages.js":"var Messages;\n\nMessages = {\n  config_not_found: \"Unable to locate sitemapfile.json , run 'ghost-sitemap init' to create one now\",\n  ghost_config_not_found: \"Unable to find ghost config file '%path%' , recheck and update your sitemapfile.json file\",\n  init: \"Started creating sitemap.....\",\n  fetching: \"Fetching <%= type%> ....\",\n  fetched: \"Converted <%= counts%> <%= type%> to xml\",\n  writing: \"Writing <%= type%> to <%= file %> ...\",\n  not_found: \"No <%= type %> found\",\n  written: \"Done writing <%= file %>\",\n  building: \"Building final sitemap...\",\n  alldone: \"all sitemaps have been created\",\n  not_inside_root: \"You are not inside the root directory of ghost\",\n  not_writable: \"Unable to create sitemapfile.json\",\n  writable: \"sitemapfile.json created with following config\",\n  pinging: \"Submitting sitemaps to <%= service %>...\",\n  ping_success: \"Submitted <%= file %> to <%= service %>\",\n  ping_error: \"Error submitting <%= file %> to <%= service %> with <%= status_code %> status code\"\n};\n\nmodule.exports = Messages;\n","/home/travis/build/npmtest/node-npmtest-ghost-sitemap/node_modules/ghost-sitemap/lib/ping.js":"var Ping, async, fs, path, q, request;\n\nq = require('q');\n\nrequest = require('request');\n\nasync = require('async');\n\npath = require('path');\n\nfs = require('fs');\n\nPing = (function() {\n  function Ping(config) {\n    this.config = config;\n    this.baseUrl = this.config.url;\n    return;\n  }\n\n  Ping.prototype.pingServer = function(service) {\n    var defer, innerPath, makeRequest, prefix, serviceUrl;\n    defer = q.defer();\n    if (service === 'google') {\n      serviceUrl = \"http://www.google.com/webmasters/sitemaps/ping?sitemap=\";\n    } else if (service === 'bing') {\n      serviceUrl = \"http://www.bing.com/webmaster/ping.aspx?siteMap=\";\n    }\n    prefix = \"\" + this.baseUrl + \"/\" + this.config.output_dir;\n    makeRequest = function(file, callback) {\n      var postfix, url;\n      postfix = \"\" + prefix + \"/\" + file;\n      url = \"\" + serviceUrl + postfix;\n      request(url, function(err, response, body) {\n        return callback(null, {\n          status: response.statusCode,\n          file: postfix\n        });\n      });\n    };\n    innerPath = path.join(process.cwd(), this.config.output_dir + \"/\");\n    fs.readdir(innerPath, function(err, files) {\n      if (files) {\n        async.map(files, makeRequest, function(error, results) {\n          if (error) {\n            return defer.reject(error);\n          } else {\n            return defer.resolve(results);\n          }\n        });\n      } else {\n        return defer.reject(err);\n      }\n    });\n    return defer.promise;\n  };\n\n  return Ping;\n\n})();\n\nmodule.exports = Ping;\n"}